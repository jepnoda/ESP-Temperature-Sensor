esphome:
  name: esp-temperature-sensor
  friendly_name: ESP Temperature Sensor

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    # Replace this with 32-byte base64 encoded string.
    # Generate 32-byte base64 encoded string in https://esphome.io/components/api.html
    key: "redacted"

ota:
  password: "redacted"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Temperature-Sensor"
    password: "redacted"

captive_portal:

web_server:
  port: 80

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: esp_ip

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 12

  - file: 'materialdesignicons-webfont.ttf'
    id: icon
    size: 20
    glyphs:
      - "\U000F0F55" #Home-Thermometer
      - "\U000F050F" #Thermometer
      - "\U000F058E" #Water-Percent

i2c:
  sda: GPIO33
  scl: GPIO35
  frequency: 800kHz

sensor:
  - platform: aht10
    address: 0x38
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity
    update_interval: 10s
    
  - platform: uptime
    name: Uptime

display:
- platform: ssd1306_i2c
  model: "SSD1306 128x64"
  address: 0x3C
  lambda: |-
    it.printf(0, 0, id(icon), "\U000F0F55");

    if (id(esp_ip).has_state()){
      it.printf(21, 3, id(roboto), id(esp_ip).state.c_str());
    }else{
      it.printf(21, 3, id(roboto), "NOT CONNECTED");
    }

    it.line(0, 21, it.get_width(), 21);
    if(id(temperature).has_state()){
      it.printf(0, 23, id(icon), "\U000F050F");
      it.printf(21, 26, id(roboto), "%.2f Â°C", id(temperature).state);
    }
    if(id(humidity).has_state()){
      it.printf(0, 45, id(icon), "\U000F058E");
      it.printf(21, 48, id(roboto), "%0.0f %%", id(humidity).state);
    }
    